(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{519:function(e,s,t){"use strict";t.r(s);var n=t(2),a=Object(n.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"intro-to-server-side-concerns-with-javascript"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#intro-to-server-side-concerns-with-javascript"}},[e._v("#")]),e._v(" Intro to Server side concerns with JavaScript")]),e._v(" "),t("p",[t("strong",[e._v("1.")]),e._v(" What do the letters of the acronym "),t("code",[e._v("CRUD")]),e._v(" stand for?\n")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("The acronym 'CRUD' stands for Create, Read, Update, and Delete. These are all of the GET, POST, PUT, and DELETE. These are the methods of communicating with a server from the client and also communicating between the server and the dadabase.\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("2.")]),e._v(" Each action that "),t("code",[e._v("CRUD")]),e._v(" represents maps to an HTTP request. What HTTP request does each "),t("code",[e._v("CRUD")]),e._v(" action correspond to?\n")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Create corresponds with POST. Read corresponds with GET. Update corresponds with PUT. Finally Delete corresponds with DELETE. It's not DESTROY, go figure.\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("3.")]),e._v(" What does "),t("code",[e._v("ORM")]),e._v(" stand for? Which "),t("code",[e._v("ORM")]),e._v(" do we use when interacting with MongoDB\n")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ORM stands for Object Relational Mapper. The ORM that we are using in our code is mongoose.\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("4.")]),e._v(" Which two "),t("code",[e._v("HTTP")]),e._v(" request types include a body?\n")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("The two HTTP requests that include a body are the POST (Create), and PUT (Update).\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("5.")]),e._v(" In a/an _______ coding model, when you call a function, it returns only when the action has finished and stops your program for the time the action takes. Likewise in a/an _______ coding model, multiple things are allowed to happen at one time. When you perform an action, your program continues to run.  Fill in the blanks.\n")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("The first blank should be: SYNCHRONOUS. The second: ASYNCHRONOUS. It will then read:\n\n-In a synchronous coding model, when you call a function, it returns only when the action has finished and stops your program for the time the action takes. Likewise in an asynchronous coding model, multiple things are allowed to happen at one time. When you perform an action, your program continues to run.\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("6.")]),e._v(" Fill in the missing piece of this snippet of code.")]),e._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" ______ "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"_______"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" Schema "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" ________"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Schema"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import the schema from "the model"\nlet schema = the schema.Schema\n\nalternatively\n\nimport mongoose from "mongoose"\nlet Schema = new Schema()\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[t("strong",[e._v("7.")]),e._v(" What is middleware?\n")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Middleware functions have access to the request, the response and the next in the request/response pipeline. They can not only access those values and properties but they can also manipulate them too. Middleware helps developers communicate what is needed from the front end to the back end of an application.\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("8.")]),e._v(" The ______ pipeline delivers information from the client while the ______ pipeline returns it. Fill in the blanks.\n")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("The first blank should be: REQUEST. The second: RESPONSE. It will then read:\n\n-The request pipeline delivers information from the client while the response pipeline returns it.\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("9.")]),e._v("\nDemonstrate the pattern that is used to include a request query with the client's "),t("code",[e._v("HTTP")]),e._v(" request providing the property "),t("code",[e._v("tag")]),e._v(" and the value "),t("code",[e._v("winter")]),e._v(".\n")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("api/TAG/TagId/winter\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])])])}),[],!1,null,null,null);s.default=a.exports}}]);